[gd_scene load_steps=18 format=2]

[ext_resource path="res://Scenes/Playtest/Outline.shader" type="Shader" id=1]
[ext_resource path="res://Scenes/Playtest/Toon_with_height.shader" type="Shader" id=2]
[ext_resource path="res://Scenes/Player/Player.tscn" type="PackedScene" id=3]
[ext_resource path="res://Textures/bumpy_noise.png" type="Texture" id=4]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 1 )
shader_param/outline_intensity = 2.0
shader_param/outline_bias = 0.0
shader_param/outline_color = Color( 0, 0, 0, 1 )

[sub_resource type="QuadMesh" id=2]
material = SubResource( 1 )
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=3]
code = "/* Toon Shader */

shader_type spatial;

render_mode ambient_light_disabled;

uniform bool use_texture = true;
uniform vec4 albedo : hint_color = vec4(0.0f);
uniform sampler2D albedo_texture : hint_albedo;

uniform bool shade = true;
uniform vec4 shade_color : hint_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
uniform float shade_strength : hint_range(0.0f, 1.0f) = 0.5f;
uniform float shade_bias : hint_range(-1.0f, 1.0f) = 0.01f;

uniform bool specular = true;
uniform vec4 specular_color : hint_color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
uniform float specular_strength : hint_range(0.0f, 1.0f) = 1.0f;
uniform float specular_bias : hint_range(0.0f, 1.0f) = 0.9f;

uniform sampler2D noise;
uniform float height_scale : hint_range(0.0f, 3.5f) = 0.5f;

void vertex() {

}

void fragment() {
	if (use_texture) {
		ALBEDO = albedo.rgb + texture(albedo_texture, UV).rgb;
	} else {
		ALBEDO = albedo.rgb;
	}
}

void light() {
	DIFFUSE_LIGHT = ALBEDO.rgb;
	//SPECULAR_LIGHT = vec3(0.0f);
	
	/* Diffuse */
	if (shade){
		// init diffuse variables
		float inv_shade_strength = 1.0 - shade_strength;
		float NdotL = dot(NORMAL, LIGHT);
		float light_intensity = step(shade_bias, NdotL);
		light_intensity = NdotL > shade_bias ? 1.0 : inv_shade_strength;

		// mix ablebo with shade color weighted by light intensity
		vec3 out_diffuse_color = mix(shade_color.rgb, ALBEDO.rgb, vec3(light_intensity));
		
		// output diffuse
		DIFFUSE_LIGHT = out_diffuse_color;
		
	}
	
	/* Specular */
	if (specular) {
		// init Specular variables
		vec3 n = normalize(NORMAL); // normalize normal vector
		float s = dot(-LIGHT, n); // calc vector scale factor for n
		vec3 N = s * n; // direction of normal and length of projected point of light source

		// calculate projection vector
		vec3 P = LIGHT + N; // light vector projected onto normal vector
		
		// calcuate reflection vector
		vec3 R = N + P; // reflection vector is angle between normal and projected vector
		
		// calculate vector from fragment to camera
		vec3 to_camera = -1.0 * VIEW;
		//vec3 to_camera = VIEW;
		
		// calculate the cosine of the angle between the reflection vector and view vector
		R = normalize(R);
		to_camera = normalize(to_camera);
		float cos_angle = dot(R, to_camera);
		cos_angle = clamp(cos_angle, 0.0, 1.0);
		
		// determine specular intensity
		float specular_intensity = cos_angle < specular_bias ? 1.0 : 0.0;
		
		// mix diffuse_out with highlight color weighted by specular intensity
		vec3 highlight_color = specular_color.rgb;
		vec3 mixed_highlight_color = mix(specular_color.rgb * specular_strength, DIFFUSE_LIGHT,  vec3(specular_intensity));
		vec3 object_color = DIFFUSE_LIGHT;
		vec3 out_specular_color = specular_intensity < 1.0 ? mixed_highlight_color : object_color;
		
		// output specular
		SPECULAR_LIGHT = out_specular_color;
		
	}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/use_texture = false
shader_param/albedo = Color( 0.403922, 0.368627, 0.27451, 0 )
shader_param/shade = true
shader_param/shade_color = Color( 0, 0, 0, 1 )
shader_param/shade_strength = 0.5
shader_param/shade_bias = 0.01
shader_param/specular = false
shader_param/specular_color = Color( 1, 1, 1, 1 )
shader_param/specular_strength = 1.0
shader_param/specular_bias = 0.9
shader_param/height_scale = 0.5

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 2 )
shader_param/use_texture = false
shader_param/use_displacement = true
shader_param/albedo = Color( 0.372549, 0.556863, 0.239216, 1 )
shader_param/shade = true
shader_param/shade_color = Color( 0, 0, 0, 1 )
shader_param/shade_strength = 0.5
shader_param/shade_bias = 0.01
shader_param/specular = false
shader_param/specular_color = Color( 1, 1, 1, 1 )
shader_param/specular_strength = 1.0
shader_param/specular_bias = 0.9
shader_param/height_scale = 1.108
shader_param/e = 0.01
shader_param/displacement = ExtResource( 4 )

[sub_resource type="PlaneMesh" id=6]
size = Vector2( 100, 100 )
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=7]
code = "/* Toon Shader */

shader_type spatial;

render_mode ambient_light_disabled;

uniform bool use_texture = true;
uniform vec4 albedo : hint_color = vec4(0.0f);
uniform sampler2D albedo_texture : hint_albedo;

uniform bool shade = true;
uniform vec4 shade_color : hint_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
uniform float shade_strength : hint_range(0.0f, 1.0f) = 0.5f;
uniform float shade_bias : hint_range(-1.0f, 1.0f) = 0.01f;

uniform bool specular = true;
uniform vec4 specular_color : hint_color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
uniform float specular_strength : hint_range(0.0f, 1.0f) = 1.0f;
uniform float specular_bias : hint_range(0.0f, 1.0f) = 0.9f;

uniform sampler2D noise;
uniform float height_scale : hint_range(0.0f, 3.5f) = 0.5f;

void vertex() {

}

void fragment() {
	if (use_texture) {
		ALBEDO = albedo.rgb + texture(albedo_texture, UV).rgb;
	} else {
		ALBEDO = albedo.rgb;
	}
}

void light() {
	DIFFUSE_LIGHT = ALBEDO.rgb;
	//SPECULAR_LIGHT = vec3(0.0f);
	
	/* Diffuse */
	if (shade){
		// init diffuse variables
		float inv_shade_strength = 1.0 - shade_strength;
		float NdotL = dot(NORMAL, LIGHT);
		float light_intensity = step(shade_bias, NdotL);
		light_intensity = NdotL > shade_bias ? 1.0 : inv_shade_strength;

		// mix ablebo with shade color weighted by light intensity
		vec3 out_diffuse_color = mix(shade_color.rgb, ALBEDO.rgb, vec3(light_intensity));
		
		// output diffuse
		DIFFUSE_LIGHT = out_diffuse_color;
		
	}
	
	/* Specular */
	if (specular) {
		// init Specular variables
		vec3 n = normalize(NORMAL); // normalize normal vector
		float s = dot(-LIGHT, n); // calc vector scale factor for n
		vec3 N = s * n; // direction of normal and length of projected point of light source

		// calculate projection vector
		vec3 P = LIGHT + N; // light vector projected onto normal vector
		
		// calcuate reflection vector
		vec3 R = N + P; // reflection vector is angle between normal and projected vector
		
		// calculate vector from fragment to camera
		vec3 to_camera = -1.0 * VIEW;
		//vec3 to_camera = VIEW;
		
		// calculate the cosine of the angle between the reflection vector and view vector
		R = normalize(R);
		to_camera = normalize(to_camera);
		float cos_angle = dot(R, to_camera);
		cos_angle = clamp(cos_angle, 0.0, 1.0);
		
		// determine specular intensity
		float specular_intensity = cos_angle < specular_bias ? 1.0 : 0.0;
		
		// mix diffuse_out with highlight color weighted by specular intensity
		vec3 highlight_color = specular_color.rgb;
		vec3 mixed_highlight_color = mix(specular_color.rgb * specular_strength, DIFFUSE_LIGHT,  vec3(specular_intensity));
		vec3 object_color = DIFFUSE_LIGHT;
		vec3 out_specular_color = specular_intensity < 1.0 ? mixed_highlight_color : object_color;
		
		// output specular
		SPECULAR_LIGHT = out_specular_color;
		
	}
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/use_texture = false
shader_param/albedo = Color( 0.14902, 0.392157, 0.14902, 1 )
shader_param/shade = true
shader_param/shade_color = Color( 0, 0, 0, 1 )
shader_param/shade_strength = 0.5
shader_param/shade_bias = 0.01
shader_param/specular = false
shader_param/specular_color = Color( 1, 1, 1, 1 )
shader_param/specular_strength = 0.304
shader_param/specular_bias = 0.961
shader_param/height_scale = 0.5

[sub_resource type="Shader" id=9]
code = "/* Toon Shader */

shader_type spatial;

render_mode ambient_light_disabled;

uniform bool use_texture = true;
uniform vec4 albedo : hint_color = vec4(0.0f);
uniform sampler2D albedo_texture : hint_albedo;

uniform bool shade = true;
uniform vec4 shade_color : hint_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
uniform float shade_strength : hint_range(0.0f, 1.0f) = 0.5f;
uniform float shade_bias : hint_range(-1.0f, 1.0f) = 0.01f;

uniform bool specular = true;
uniform vec4 specular_color : hint_color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
uniform float specular_strength : hint_range(0.0f, 1.0f) = 1.0f;
uniform float specular_bias : hint_range(0.0f, 1.0f) = 0.9f;

uniform sampler2D noise;
uniform float height_scale : hint_range(0.0f, 3.5f) = 0.5f;

void vertex() {

}

void fragment() {
	if (use_texture) {
		ALBEDO = albedo.rgb + texture(albedo_texture, UV).rgb;
	} else {
		ALBEDO = albedo.rgb;
	}
}

void light() {
	DIFFUSE_LIGHT = ALBEDO.rgb;
	//SPECULAR_LIGHT = vec3(0.0f);
	
	/* Diffuse */
	if (shade){
		// init diffuse variables
		float inv_shade_strength = 1.0 - shade_strength;
		float NdotL = dot(NORMAL, LIGHT);
		float light_intensity = step(shade_bias, NdotL);
		light_intensity = NdotL > shade_bias ? 1.0 : inv_shade_strength;

		// mix ablebo with shade color weighted by light intensity
		vec3 out_diffuse_color = mix(shade_color.rgb, ALBEDO.rgb, vec3(light_intensity));
		
		// output diffuse
		DIFFUSE_LIGHT = out_diffuse_color;
		
	}
	
	/* Specular */
	if (specular) {
		// init Specular variables
		vec3 n = normalize(NORMAL); // normalize normal vector
		float s = dot(-LIGHT, n); // calc vector scale factor for n
		vec3 N = s * n; // direction of normal and length of projected point of light source

		// calculate projection vector
		vec3 P = LIGHT + N; // light vector projected onto normal vector
		
		// calcuate reflection vector
		vec3 R = N + P; // reflection vector is angle between normal and projected vector
		
		// calculate vector from fragment to camera
		vec3 to_camera = -1.0 * VIEW;
		//vec3 to_camera = VIEW;
		
		// calculate the cosine of the angle between the reflection vector and view vector
		R = normalize(R);
		to_camera = normalize(to_camera);
		float cos_angle = dot(R, to_camera);
		cos_angle = clamp(cos_angle, 0.0, 1.0);
		
		// determine specular intensity
		float specular_intensity = cos_angle < specular_bias ? 1.0 : 0.0;
		
		// mix diffuse_out with highlight color weighted by specular intensity
		vec3 highlight_color = specular_color.rgb;
		vec3 mixed_highlight_color = mix(specular_color.rgb * specular_strength, DIFFUSE_LIGHT,  vec3(specular_intensity));
		vec3 object_color = DIFFUSE_LIGHT;
		vec3 out_specular_color = specular_intensity < 1.0 ? mixed_highlight_color : object_color;
		
		// output specular
		SPECULAR_LIGHT = out_specular_color;
		
	}
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/use_texture = false
shader_param/albedo = Color( 0.560784, 0.329412, 0.270588, 1 )
shader_param/shade = true
shader_param/shade_color = Color( 0, 0, 0, 1 )
shader_param/shade_strength = 0.5
shader_param/shade_bias = 0.01
shader_param/specular = false
shader_param/specular_color = Color( 1, 1, 1, 1 )
shader_param/specular_strength = 1.0
shader_param/specular_bias = 0.9
shader_param/height_scale = 0.5

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 2 )
shader_param/use_texture = false
shader_param/use_displacement = false
shader_param/albedo = Color( 0.447059, 0.227451, 0.0235294, 1 )
shader_param/shade = true
shader_param/shade_color = Color( 0, 0, 0, 1 )
shader_param/shade_strength = 0.5
shader_param/shade_bias = 0.01
shader_param/specular = false
shader_param/specular_color = Color( 1, 1, 1, 1 )
shader_param/specular_strength = 1.0
shader_param/specular_bias = 0.9
shader_param/height_scale = 0.5
shader_param/e = 0.01

[sub_resource type="Shader" id=12]
code = "/* Toon Shader */

shader_type spatial;

render_mode ambient_light_disabled;

uniform bool use_texture = true;
uniform bool use_displacement = false;
uniform vec4 albedo : hint_color = vec4(0.0f);
uniform sampler2D albedo_texture : hint_albedo;

uniform bool shade = true;
uniform vec4 shade_color : hint_color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
uniform float shade_strength : hint_range(0.0f, 1.0f) = 0.5f;
uniform float shade_bias : hint_range(-1.0f, 1.0f) = 0.01f;

uniform bool specular = true;
uniform vec4 specular_color : hint_color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
uniform float specular_strength : hint_range(0.0f, 1.0f) = 1.0f;
uniform float specular_bias : hint_range(0.0f, 1.0f) = 0.9f;

/* start vertex code */

uniform float height_scale : hint_range(0.0f, 10.0f) = 0.5;
uniform sampler2D displacement;
uniform float e : hint_range(0.0001f, 0.1f) = 0.01;

float get_height(vec2 pos) {
	vec2 tex_position = pos / 2.0 + 0.5;
	float height = texture(displacement, tex_position).x;
	return height * height_scale;
}

// sample 2 points to define plane, then calc normal of that plane
vec3 plane_norm2(vec3 pos) {
	// get two nearby samples
	vec3 A = vec3(pos.x+e, get_height(vec2(pos.x+e, pos.z+e)), pos.z+e);
	vec3 B = vec3(pos.x-e, get_height(vec2(pos.x-e, pos.z+e)), pos.z+e);
	
	// find normal of plane
	vec3 R = A - pos;
	vec3 S = B - pos;
	vec3 normal = cross(S, R);
	normal = normalize(normal);
	return normal;
}

void vertex() {
	if (use_displacement) {
		float height = get_height(VERTEX.xz);
		VERTEX.y += height;
		
		// recalculate the normal
		NORMAL = plane_norm2(VERTEX);
	}
}

/* end vertex code */


void fragment() {
	if (use_texture) {
		ALBEDO = albedo.rgb + texture(albedo_texture, UV).rgb;
	} else {
		ALBEDO = albedo.rgb;
	}
}

void light() {
	DIFFUSE_LIGHT = ALBEDO.rgb;
	//SPECULAR_LIGHT = vec3(0.0f);
	
	/* Diffuse */
	if (shade){
		// init diffuse variables
		float inv_shade_strength = 1.0 - shade_strength;
		float NdotL = dot(NORMAL, LIGHT);
		float light_intensity = step(shade_bias, NdotL);
		light_intensity = NdotL > shade_bias ? 1.0 : inv_shade_strength;

		// mix ablebo with shade color weighted by light intensity
		vec3 out_diffuse_color = mix(shade_color.rgb, ALBEDO.rgb, vec3(light_intensity));
		
		// output diffuse
		DIFFUSE_LIGHT = out_diffuse_color;
		
	}
	
	/* Specular */
	if (specular) {
		// init Specular variables
		vec3 n = normalize(NORMAL); // normalize normal vector
		float s = dot(-LIGHT, n); // calc vector scale factor for n
		vec3 N = s * n; // direction of normal and length of projected point of light source

		// calculate projection vector
		vec3 P = LIGHT + N; // light vector projected onto normal vector
		
		// calcuate reflection vector
		vec3 R = N + P; // reflection vector is angle between normal and projected vector
		
		// calculate vector from fragment to camera
		vec3 to_camera = -1.0 * VIEW;
		//vec3 to_camera = VIEW;
		
		// calculate the cosine of the angle between the reflection vector and view vector
		R = normalize(R);
		to_camera = normalize(to_camera);
		float cos_angle = dot(R, to_camera);
		cos_angle = clamp(cos_angle, 0.0, 1.0);
		
		// determine specular intensity
		float specular_intensity = cos_angle < specular_bias ? 1.0 : 0.0;
		
		// mix diffuse_out with highlight color weighted by specular intensity
		vec3 highlight_color = specular_color.rgb;
		vec3 mixed_highlight_color = mix(specular_color.rgb * specular_strength, DIFFUSE_LIGHT,  vec3(specular_intensity));
		vec3 object_color = DIFFUSE_LIGHT;
		vec3 out_specular_color = specular_intensity < 1.0 ? mixed_highlight_color : object_color;
		
		// output specular
		SPECULAR_LIGHT = out_specular_color;
		
	}
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/use_texture = false
shader_param/use_displacement = false
shader_param/albedo = Color( 0.388235, 0.521569, 0.545098, 1 )
shader_param/shade = true
shader_param/shade_color = Color( 0, 0, 0, 1 )
shader_param/shade_strength = 0.5
shader_param/shade_bias = 0.01
shader_param/specular = true
shader_param/specular_color = Color( 1, 1, 1, 1 )
shader_param/specular_strength = 1.0
shader_param/specular_bias = 0.9
shader_param/height_scale = 0.5
shader_param/e = 0.01

[node name="Backyard Playtest Level" type="Spatial"]

[node name="ScreenSpaceShader" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -5.26769, 0 )
extra_cull_margin = 16384.0
mesh = SubResource( 2 )
material/0 = null

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, -0.5, 0.5, 0, 20, 0 )

[node name="Rock Wall" type="CSGCombiner" parent="."]
transform = Transform( 0.906581, 0, 0.422033, 0, 1, 0, -0.422033, 0, 0.906581, 2.3752, 0, -18.8676 )
material_override = SubResource( 4 )
use_collision = true

[node name="wall" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.77678, 8.025, -0.00756664 )
height = 10.2473
depth = 13.5032

[node name="Step1" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0205857, 5.365, 4.83389 )
height = 0.5

[node name="Step2" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.000645874, 4.942, 0.151662 )
height = 0.5

[node name="Step3" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0226705, 6.232, -5.32343 )
height = 0.5

[node name="Step4" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0215702, 11.6734, 4.60503 )
height = 0.5

[node name="Step5" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00928783, 9.39809, -0.37005 )
height = 0.5

[node name="Step6" type="CSGBox" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0115671, 12.7563, -5.21944 )
height = 0.5

[node name="Pole2" type="CSGCylinder" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.75973, 1.72909, -5.90866 )
radius = 0.690105
height = 2.70309

[node name="Pole3" type="CSGCylinder" parent="Rock Wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.75973, 1.72909, 5.78348 )
radius = 0.690105
height = 2.70309

[node name="Base  Floor" type="CSGCombiner" parent="."]
material_override = SubResource( 5 )
use_collision = true

[node name="Floor" type="CSGBox" parent="Base  Floor"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1, 0, 0 )
visible = false
width = 100.0
height = 1.0
depth = 100.0

[node name="CSGMesh" type="CSGMesh" parent="Base  Floor"]
mesh = SubResource( 6 )

[node name="House" type="CSGCombiner" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -14.9699, 11.6477, -31.5001 )
material_override = SubResource( 8 )
use_collision = true

[node name="Outer Box" type="CSGBox" parent="House"]
width = 6.11489
height = 5.07435
depth = 6.2779

[node name="Inner Box" type="CSGBox" parent="House"]
operation = 2
width = 5.11269
height = 4.30877
depth = 5.53879

[node name="CSGCylinder" type="CSGCylinder" parent="House"]
transform = Transform( -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0 )
operation = 2
radius = 1.68563
height = 6.35381

[node name="Pole" type="CSGCylinder" parent="House"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -7.01176, 0 )
radius = 0.690105
height = 9.04652

[node name="Start" type="CSGCombiner" parent="."]
material_override = SubResource( 10 )
use_collision = true

[node name="Box" type="CSGBox" parent="Start"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 3.10099, 6.69068, 2.58415 )
width = 6.72995
height = 1.07929
depth = 5.26821

[node name="Ramp" type="CSGPolygon" parent="Start"]
transform = Transform( -2.62268e-07, 0, -6, 0, 2, 0, 6, 0, -2.62268e-07, 0, 0, 19.3668 )
polygon = PoolVector2Array( -0.990148, -0.0138676, -0.98645, 3.31991, 1.08704, -0.0751826, 0.25965, 0.00220215 )
__meta__ = {
"_edit_lock_": true
}

[node name="Pole" type="CSGCylinder" parent="Start"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 3.01392, 3.5068, 2.65005 )
height = 6.19616

[node name="Tree" type="CSGCombiner" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -38.4196, 0, 0 )
material_override = SubResource( 11 )
use_collision = true

[node name="Truck" type="CSGCylinder" parent="Tree"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 23.7036, 0 )
height = 50.0

[node name="Branch" type="CSGCylinder" parent="Tree"]
transform = Transform( 0.559916, 0.828549, 0, -0.828549, 0.559916, 0, 0, 0, 1, 10.0885, 37.4928, 0 )
radius = 0.553859
height = 25.0

[node name="Branch2" type="CSGCylinder" parent="Tree"]
transform = Transform( -0.483592, -0.715606, 0.50403, -0.828549, 0.559916, 0, -0.282215, -0.417614, -0.863686, -8.845, 37.4928, -5.22712 )
radius = 0.553859
height = 25.0

[node name="Branch3" type="CSGCylinder" parent="Tree"]
transform = Transform( -0.464115, -0.686785, -0.559396, -0.828549, 0.559916, 0, 0.313215, 0.463487, -0.828901, -6.11085, 46.0875, 4.19788 )
radius = 0.553859
height = 19.7203

[node name="Player" parent="." instance=ExtResource( 3 )]
transform = Transform( -0.198688, 0, 0.151733, 0, 0.25, 0, -0.151733, 0, -0.198688, 2.79316, 7.50243, 3.80324 )
MOVE_SPEED = 10.0
JUMP_SPEED = 10.0

[node name="4 wall" type="CSGCombiner" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 22.071, 0, 1.58506 )
material_override = SubResource( 13 )
use_collision = true

[node name="CSGBox" type="CSGBox" parent="4 wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 17.1453, 0 )
width = 2.74932
height = 38.1716
depth = 5.3583

[node name="CSGCylinder" type="CSGCylinder" parent="4 wall"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.57758, 9.75589, -24.4954 )
radius = 12.328
height = 21.12
